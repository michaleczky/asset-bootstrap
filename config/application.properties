#src/test/resources/application.properties are available to tests and are not embedded in jar.  Careful because eclipse 'projects' can see them in test scope.
#you should change these properties to match your own UAA, ClientId, User and PredixAsset instances.

#if you are behind a corporate proxy/firewall and want to access Predix Cloud
#predix.oauth.proxyHost =put.your.proxyHost.here 
#predix.oauth.proxyPort=put.your.proxyPort.here

#OAuth - please see predix-rest-client src/main/java/com/ge/predix/solsvc/restclient/config/OauthRestConfig.java for more info on oauth properties
# e.g. predix.oauth.restHost=36492c1e-657c-4377-ac51-add963552460.predix-uaa.cloud.com
predix.oauth.restHost=put.your.uaa.uri.here
#you may put client:secret as unencoded cleartext by setting predix.oauth.clientIdEncode=true
predix.oauth.clientIdEncode=false
predix.oauth.clientId=you.should.base64encode(put.your.clientId:put.your.clientSecret) 
predix.oauth.certLocation=
predix.oauth.tokenType=JWT
predix.oauth.resourceProtocol=https
predix.oauth.resource=/oauth/token
predix.oauth.restPort=80
predix.oauth.grantType=client_credentials

#for predix.oauth.grant_type=password communication which is not recommended
#predix.oauth.userName=put.your.username
#predix.oauth.userPassword=put.your.password
#predix.oauth.encodePassword=false


#asset - get from VCAP env vars by binding an application to your asset instance e.g. cf bind-service <my-app> <my-asset>
#asset - see asset-bootstrap - src/main/java/com/ge/predix/solsvc/bootstrap/ams/common/AssetRestConfig.java for more info on asset properties 
# e.g. predix.asset.restHost=predix-asset.cloud.com
predix.asset.restHost=put.your.asset.service.instance.name.hostname.here
predix.asset.zoneid=put.your.asset.zoneid
# e.g. asset.service.base.url=https://predix-asset.cloud.com
asset.service.base.url=put.your.asset.service.base.url
